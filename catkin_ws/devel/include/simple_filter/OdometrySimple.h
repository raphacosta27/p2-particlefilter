// Generated by gencpp from file simple_filter/OdometrySimple.msg
// DO NOT EDIT!


#ifndef SIMPLE_FILTER_MESSAGE_ODOMETRYSIMPLE_H
#define SIMPLE_FILTER_MESSAGE_ODOMETRYSIMPLE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace simple_filter
{
template <class ContainerAllocator>
struct OdometrySimple_
{
  typedef OdometrySimple_<ContainerAllocator> Type;

  OdometrySimple_()
    : west_to_east_position(0.0)
    , south_to_north_position(0.0)  {
    }
  OdometrySimple_(const ContainerAllocator& _alloc)
    : west_to_east_position(0.0)
    , south_to_north_position(0.0)  {
  (void)_alloc;
    }



   typedef double _west_to_east_position_type;
  _west_to_east_position_type west_to_east_position;

   typedef double _south_to_north_position_type;
  _south_to_north_position_type south_to_north_position;




  typedef boost::shared_ptr< ::simple_filter::OdometrySimple_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::simple_filter::OdometrySimple_<ContainerAllocator> const> ConstPtr;

}; // struct OdometrySimple_

typedef ::simple_filter::OdometrySimple_<std::allocator<void> > OdometrySimple;

typedef boost::shared_ptr< ::simple_filter::OdometrySimple > OdometrySimplePtr;
typedef boost::shared_ptr< ::simple_filter::OdometrySimple const> OdometrySimpleConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::simple_filter::OdometrySimple_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::simple_filter::OdometrySimple_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace simple_filter

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'simple_filter': ['/home/borg/catkin_ws/src/robot17/particle_filter/simple_filter/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::simple_filter::OdometrySimple_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::simple_filter::OdometrySimple_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::simple_filter::OdometrySimple_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::simple_filter::OdometrySimple_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::simple_filter::OdometrySimple_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::simple_filter::OdometrySimple_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::simple_filter::OdometrySimple_<ContainerAllocator> >
{
  static const char* value()
  {
    return "44f4ba1870bd1a40b628235c08560d3f";
  }

  static const char* value(const ::simple_filter::OdometrySimple_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x44f4ba1870bd1a40ULL;
  static const uint64_t static_value2 = 0xb628235c08560d3fULL;
};

template<class ContainerAllocator>
struct DataType< ::simple_filter::OdometrySimple_<ContainerAllocator> >
{
  static const char* value()
  {
    return "simple_filter/OdometrySimple";
  }

  static const char* value(const ::simple_filter::OdometrySimple_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::simple_filter::OdometrySimple_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 west_to_east_position\n\
float64 south_to_north_position\n\
";
  }

  static const char* value(const ::simple_filter::OdometrySimple_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::simple_filter::OdometrySimple_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.west_to_east_position);
      stream.next(m.south_to_north_position);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct OdometrySimple_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::simple_filter::OdometrySimple_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::simple_filter::OdometrySimple_<ContainerAllocator>& v)
  {
    s << indent << "west_to_east_position: ";
    Printer<double>::stream(s, indent + "  ", v.west_to_east_position);
    s << indent << "south_to_north_position: ";
    Printer<double>::stream(s, indent + "  ", v.south_to_north_position);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SIMPLE_FILTER_MESSAGE_ODOMETRYSIMPLE_H
