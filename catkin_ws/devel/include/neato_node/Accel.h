// Generated by gencpp from file neato_node/Accel.msg
// DO NOT EDIT!


#ifndef NEATO_NODE_MESSAGE_ACCEL_H
#define NEATO_NODE_MESSAGE_ACCEL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace neato_node
{
template <class ContainerAllocator>
struct Accel_
{
  typedef Accel_<ContainerAllocator> Type;

  Accel_()
    : accelXInG(0.0)
    , accelYInG(0.0)
    , accelZInG(0.0)  {
    }
  Accel_(const ContainerAllocator& _alloc)
    : accelXInG(0.0)
    , accelYInG(0.0)
    , accelZInG(0.0)  {
  (void)_alloc;
    }



   typedef double _accelXInG_type;
  _accelXInG_type accelXInG;

   typedef double _accelYInG_type;
  _accelYInG_type accelYInG;

   typedef double _accelZInG_type;
  _accelZInG_type accelZInG;




  typedef boost::shared_ptr< ::neato_node::Accel_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::neato_node::Accel_<ContainerAllocator> const> ConstPtr;

}; // struct Accel_

typedef ::neato_node::Accel_<std::allocator<void> > Accel;

typedef boost::shared_ptr< ::neato_node::Accel > AccelPtr;
typedef boost::shared_ptr< ::neato_node::Accel const> AccelConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::neato_node::Accel_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::neato_node::Accel_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace neato_node

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'neato_node': ['/home/borg/catkin_ws/src/robot17/neato_robot/neato_node/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::neato_node::Accel_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::neato_node::Accel_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::neato_node::Accel_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::neato_node::Accel_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::neato_node::Accel_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::neato_node::Accel_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::neato_node::Accel_<ContainerAllocator> >
{
  static const char* value()
  {
    return "207a3851a50869ae8ce637885057d51b";
  }

  static const char* value(const ::neato_node::Accel_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x207a3851a50869aeULL;
  static const uint64_t static_value2 = 0x8ce637885057d51bULL;
};

template<class ContainerAllocator>
struct DataType< ::neato_node::Accel_<ContainerAllocator> >
{
  static const char* value()
  {
    return "neato_node/Accel";
  }

  static const char* value(const ::neato_node::Accel_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::neato_node::Accel_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 accelXInG\n\
float64 accelYInG\n\
float64 accelZInG\n\
";
  }

  static const char* value(const ::neato_node::Accel_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::neato_node::Accel_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.accelXInG);
      stream.next(m.accelYInG);
      stream.next(m.accelZInG);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Accel_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::neato_node::Accel_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::neato_node::Accel_<ContainerAllocator>& v)
  {
    s << indent << "accelXInG: ";
    Printer<double>::stream(s, indent + "  ", v.accelXInG);
    s << indent << "accelYInG: ";
    Printer<double>::stream(s, indent + "  ", v.accelYInG);
    s << indent << "accelZInG: ";
    Printer<double>::stream(s, indent + "  ", v.accelZInG);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NEATO_NODE_MESSAGE_ACCEL_H
